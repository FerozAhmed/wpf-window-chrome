<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:WpfWindowChrome"
    xmlns:ext="clr-namespace:System.Windows.Extensions;assembly=WindowChrome">

    <Style TargetType="{x:Type local:CustomChromeWindow}">
        <Setter Property="MinWidth" Value="150" />
        <Setter Property="MinHeight" Value="50" />
        <Setter Property="WindowBarStyle">
            <Setter.Value>
                <Style TargetType="{x:Type Thumb}">
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type Thumb}">
                                <TextBlock Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" 
                                   Background="Transparent" VerticalAlignment="Center" Padding="10,0,0,0"
                                   Text="{Binding RelativeSource={RelativeSource Mode=FindAncestor, 
                                   AncestorType={x:Type local:CustomChromeWindow}}, Path=Title}" />
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:CustomChromeWindow}">
                    <!-- This window adjusts the non-client area so the client area has the same
                         dimensions as the Window's Actual* properties. WPF internally has no idea
                         about this, so to account for it need to stub a root content element of
                         the correct size and anchor things off of that. -->
                    <Canvas x:Name="PART_RootCanvas"
                        Width="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}, Path=ActualWidth}"
                        Height="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}, Path=ActualHeight}">
                        <!-- Since there is no system caption, we're responsible for indicating to 
                             the user when the window is in an active vs. inactive state. -->
                        <Canvas.Style>
                            <Style>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}, Path=IsActive}" Value="False">
                                        <Setter Property="Canvas.Background" 
                                            Value="{Binding Path=InactiveWindowBarBrush, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:CustomChromeWindow}}}" />
                                    </DataTrigger>
                                </Style.Triggers>
                                <Setter Property="Canvas.Background" 
                                    Value="{Binding Path=ActiveWindowBarBrush, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:CustomChromeWindow}}}" />
                            </Style>
                        </Canvas.Style>
                        <Border x:Name="PART_BackgroundBorder" Background="{x:Null}" BorderBrush="{TemplateBinding BorderBrush}"
                            Width="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Canvas}}, Path=Width}"
                            Height="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Canvas}}, Path=Height}">
                            <Border.Style>
                                <!-- This behaves different on XP and Vista.
                                     Windows should automatically clip the borders of a window when it's maximized so long as an HRGN
                                     hasn't been set.  We're doing our own HRGNs to keep the frame rectangular, but attempting to remove
                                     it when maximized doesn't give the desired effect, I think because of WPF internal calls to
                                     AdjustWindowRect.  To work around this we explicitly set the HRGN on maximization.
                                     On Vista the HRGN clips the window, which would clip client-area content.  So this makes it so
                                     the content can still be seen.  On XP the HRGN appears to just resize the window, so you'll see 
                                     the thick border. 
                                     Other workarounds may be appropriate.  This behavior is just for demonstration's sake.  -->
                                <Style>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}, Path=WindowState}" Value="Maximized">
                                            <Setter Property="Border.BorderThickness" Value="0"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                    <Setter Property="Border.BorderThickness" Value="2"/>
                                </Style>
                            </Border.Style>
                            <AdornerDecorator x:Name="PART_Adorner" OpacityMask="{x:Null}"
                                Height="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Canvas}}, Path=Height}"
                                Width="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Canvas}}, Path=Width}">
                                <Grid>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto" />
                                        <RowDefinition Height="*" />
                                    </Grid.RowDefinitions>
                                    <Grid Height="{TemplateBinding WindowBarHeight}">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="*" />
                                            <ColumnDefinition Width="25" />
                                            <ColumnDefinition Width="25" />
                                            <ColumnDefinition Width="25" />
                                        </Grid.ColumnDefinitions>
                                        <Thumb x:Name="PART_WindowBarThumb" Style="{TemplateBinding WindowBarStyle}"
                                            Grid.Column="0" Grid.ColumnSpan="4" IsHitTestVisible="False" />
                                        <Button x:Name="PART_MinimizeButton" Grid.Column="1" Content="_" 
                                            Style="{TemplateBinding MinimizeButtonStyle}" ext:WindowChrome.HitTestable="True" />
                                        <Button x:Name="PART_MaximizeButton" Grid.Column="2" Content="+"
                                            Style="{TemplateBinding MaximizeButtonStyle}" ext:WindowChrome.HitTestable="True" />
                                        <Button x:Name="PART_CloseButton" Grid.Column="3" Content="x" 
                                            Style="{TemplateBinding CloseButtonStyle}" ext:WindowChrome.HitTestable="True" />
                                    </Grid>
                                    <local:SizeToContentDecorator x:Name="PART_SizingDecorator" Grid.Row="1">
                                        <ContentPresenter />
                                    </local:SizeToContentDecorator>
                                </Grid>
                            </AdornerDecorator>
                        </Border>
                    </Canvas>
                    <ControlTemplate.Triggers>
                        <Trigger Property="WindowStyle" Value="ToolWindow">
                            <Setter TargetName="PART_MinimizeButton" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="PART_MaximizeButton" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
</ResourceDictionary>
